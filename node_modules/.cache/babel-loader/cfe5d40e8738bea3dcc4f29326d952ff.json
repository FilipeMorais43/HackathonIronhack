{"ast":null,"code":"var _jsxFileName = \"/Users/joanacruz/Desktop/Hackathon/src/components/OurInput/index.jsx\";\nimport React, { Component, Fragment } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass OurInput extends Component {\n  constructor() {\n    super();\n    this.questions = this.createQuestionArray();\n    this.state = {\n      questions: this.questions\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmission = this.handleSubmission.bind(this);\n  }\n\n  createQuestionArray() {\n    const array = [];\n\n    for (let i = 0; i < 30; i++) {\n      array.push({\n        text: ''\n      });\n    }\n\n    return array;\n  }\n\n  handleInputChange(event) {\n    event.preventDefault();\n    const inputName = event.target.name;\n    const value = event.target.value;\n    console.log(inputName);\n    this.setState({\n      [inputName]: value\n    });\n  }\n\n  handleSubmission(event) {\n    event.preventDefault();\n    const submission = {}; // TO DO --> add to our existing data of companies\n  }\n\n  render() {\n    const {\n      type,\n      name,\n      labelTrue,\n      labelFalse,\n      title,\n      choices,\n      idInput\n    } = this.props; //console.log(idInput);\n\n    console.log(\"HERE\", this.state.questions);\n    return React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, name.includes(\"question\") && React.createElement(Form.Label, {\n      key: idInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, title) || React.createElement(Form.Label, {\n      key: idInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, name), type === \"text\" && React.createElement(Form.Control, {\n      name: idInput,\n      value: this.state.questions[idInput].text,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }) || type === \"dropdown\" && React.createElement(Form.Control, {\n      as: \"select\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, choices.map(choice => React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, choice.text))) || type === \"boolean\" && React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      inline: true,\n      label: labelTrue,\n      type: \"checkbox\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Form.Check, {\n      inline: true,\n      label: labelFalse,\n      type: \"checkbox\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default OurInput;","map":{"version":3,"sources":["/Users/joanacruz/Desktop/Hackathon/src/components/OurInput/index.jsx"],"names":["React","Component","Fragment","Form","OurInput","constructor","questions","createQuestionArray","state","handleInputChange","bind","handleSubmission","array","i","push","text","event","preventDefault","inputName","target","name","value","console","log","setState","submission","render","type","labelTrue","labelFalse","title","choices","idInput","props","includes","map","choice"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Form } from 'react-bootstrap';\n\nclass OurInput extends Component {\n    constructor(){\n        super();\n        this.questions = this.createQuestionArray();\n        this.state = {\n            questions: this.questions\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmission = this.handleSubmission.bind(this);\n    }\n\n    createQuestionArray(){\n        const array = [];\n        for(let i  = 0; i < 30; i++){\n            array.push({\n                text: ''\n            });\n        }\n        return array;\n    }\n    handleInputChange(event){\n        event.preventDefault();\n        const inputName = event.target.name\n        const value = event.target.value\n\n        console.log(inputName);\n        this.setState({\n            [inputName]: value\n        })\n    }\n    \n    handleSubmission(event){\n        event.preventDefault();\n\n        const submission = {\n            \n        }\n\n        // TO DO --> add to our existing data of companies\n    }\n\n    render() {\n        const{ type, name, labelTrue, labelFalse, title, choices, idInput } = this.props;\n\n        //console.log(idInput);\n        console.log(\"HERE\", this.state.questions);\n        return (\n            <Form.Group>\n            {\n                (name.includes(\"question\") && <Form.Label key={idInput}>{ title }</Form.Label>)\n                || <Form.Label key={idInput}>{ name }</Form.Label>\n\n            }\n            {\n                (type === \"text\" && \n                <Form.Control name={idInput} value={this.state.questions[idInput].text} onChange={this.handleInputChange}></Form.Control>\n                )\n                ||\n                (type === \"dropdown\" && <Form.Control as=\"select\" onChange={this.handleInputChange}>\n                    {\n                        choices.map(choice => (\n                            <option>{choice.text}</option>\n                        ))\n                    }\n                </Form.Control>)\n                ||\n                (type === \"boolean\" && \n                <Fragment>\n                    <Form.Check inline label={labelTrue} type=\"checkbox\" onChange={this.handleInputChange}/>\n                    <Form.Check inline label={labelFalse} type=\"checkbox\" onChange={this.handleInputChange}/>\n                </Fragment>\n                )\n            }\n            </Form.Group>\n        )\n    }\n}\n\nexport default OurInput;\n"]},"metadata":{},"sourceType":"module"}
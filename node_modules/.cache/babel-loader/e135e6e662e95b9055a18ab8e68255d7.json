{"ast":null,"code":"var _jsxFileName = \"/Users/joanacruz/Desktop/Hackathon/src/components/OurInput/index.jsx\";\nimport React, { Component, Fragment } from 'react';\nimport { Form } from 'react-bootstrap';\n\nclass OurInput extends Component {\n  constructor() {\n    super();\n    this.type = '';\n  }\n\n  render() {\n    const {\n      type,\n      name,\n      labelTrue,\n      labelFalse,\n      title,\n      choices\n    } = this.props;\n    return React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, name), type === \"text\" && React.createElement(Form.Control, {\n      as: \"textarea\",\n      rows: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }) || type === \"dropdown\" && React.createElement(Form.Control, {\n      as: \"select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, console.log(choices)) || type === \"boolean\" && React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      inline: true,\n      label: labelTrue,\n      type: \"radio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(Form.Check, {\n      inline: true,\n      label: labelFalse,\n      type: \"radio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default OurInput;","map":{"version":3,"sources":["/Users/joanacruz/Desktop/Hackathon/src/components/OurInput/index.jsx"],"names":["React","Component","Fragment","Form","OurInput","constructor","type","render","name","labelTrue","labelFalse","title","choices","props","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC7BI,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,IAAL,GAAY,EAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAK;AAAED,MAAAA,IAAF;AAAQE,MAAAA,IAAR;AAAcC,MAAAA,SAAd;AAAyBC,MAAAA,UAAzB;AAAqCC,MAAAA,KAArC;AAA4CC,MAAAA;AAA5C,QAAwD,KAAKC,KAAlE;AAEA,WACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAcL,IAAd,CADA,EAGCF,IAAI,KAAK,MAAT,IACD,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,EAAE,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,IAICA,IAAI,KAAK,UAAT,IAAuB,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,EAAE,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEhBQ,OAAO,CAACC,GAAR,CAAYH,OAAZ,CAFgB,CAJxB,IAUCN,IAAI,KAAK,SAAT,IACD,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,MAAM,MAAlB;AAAmB,MAAA,KAAK,EAAEG,SAA1B;AAAqC,MAAA,IAAI,EAAC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,MAAM,MAAlB;AAAmB,MAAA,KAAK,EAAEC,UAA1B;AAAsC,MAAA,IAAI,EAAC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAdA,CADJ;AAuBH;;AAhC4B;;AAmCjC,eAAeN,QAAf","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Form } from 'react-bootstrap';\n\nclass OurInput extends Component {\n    constructor(){\n        super();\n        this.type = '';\n    }\n\n    render() {\n        const{ type, name, labelTrue, labelFalse, title, choices } = this.props;\n\n        return (\n            <Form.Group>\n            <Form.Label>{ name }</Form.Label>\n            {\n            (type === \"text\" && \n            <Form.Control as=\"textarea\" rows=\"3\"></Form.Control>\n            )\n            ||\n            (type === \"dropdown\" && <Form.Control as=\"select\">\n                {\n                    console.log(choices)\n                }\n            </Form.Control>)\n            ||\n            (type === \"boolean\" && \n            <Fragment>\n                <Form.Check inline label={labelTrue} type=\"radio\"/>\n                <Form.Check inline label={labelFalse} type=\"radio\"/>\n            </Fragment>\n            )\n            }\n            </Form.Group>\n        )\n    }\n}\n\nexport default OurInput;\n"]},"metadata":{},"sourceType":"module"}